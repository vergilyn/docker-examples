# https://redis.io/topics/cluster-tutorial

# If "yes", enables Redis Cluster support in a specific Redis instance.
# Otherwise the instance starts as a stand alone instance as usual.
#
# cluster-enabled <yes/no>
cluster-enabled yes


# Note that despite the name of this option, **this is not a user editable configuration file**,
# but the file where a Redis Cluster node automatically persists the cluster configuration (the state, basically) every time there is a change,
# in order to be able to re-read it at startup.
# The file lists things like the other nodes in the cluster, their state, persistent variables, and so forth.
# Often this file is rewritten and flushed on disk as a result of some message reception.
#
# cluster-config-file <filename>
cluster-config-file redis-cluster-node.conf


# The maximum amount of time a Redis Cluster node can be unavailable, without it being considered as failing.
# If a master node is not reachable for more than the specified amount of time, it will be failed over by its slaves.
# This parameter controls other important things in Redis Cluster.
# Notably, every node that can't reach the majority of master nodes for the specified amount of time, will stop accepting queries.
#
# cluster-node-timeout <milliseconds>
cluster-node-timeout 5000


# If set to zero, a slave will always consider itself valid, and will therefore always try to failover a master,
# regardless of the amount of time the link between the master and the slave remained disconnected.
# If the value is positive, a maximum disconnection time is calculated as the node timeout value multiplied by the factor provided with this option,
# and if the node is a slave, it will not try to start a failover if the master link was disconnected for more than the specified amount of time.
#
# For example, if the node timeout is set to 5 seconds and the validity factor is set to 10,
# a slave disconnected from the master for more than 50 seconds will not try to failover its master.
# Note that any value different than zero may result in Redis Cluster being unavailable after a master failure
# if there is no slave that is able to failover it.
# In that case the cluster will return to being available only when the original master rejoins the cluster.
#
# cluster-slave-validity-factor <factor>


# Minimum number of slaves a master will remain connected with,
# for another slave to migrate to a master which is no longer covered by any slave.
# See the appropriate section about [replica](https://redis.io/topics/replication) migration in this tutorial for more information.
#
# cluster-migration-barrier <count>


# If this is set to "yes", as it is by default, the cluster stops accepting writes if some percentage of the key space is not covered by any node.
# If the option is set to "no", the cluster will still serve queries even if only requests about a subset of keys can be processed.
#
# cluster-require-full-coverage <yes/no>


# If this is set to "no", as it is by default, a node in a Redis Cluster will stop serving all traffic when the cluster is marked as failed,
# either when a node can't reach a quorum of masters or when full coverage is not met.
# This prevents reading potentially inconsistent data from a node that is unaware of changes in the cluster.
#
# This option can be set to "yes" to allow reads from a node during the fail state,
# which is useful for applications that want to prioritize read availability but still want to prevent inconsistent writes.
# It can also be used for when using Redis Cluster with only one or two shards,
# as it allows the nodes to continue serving writes when a master fails but automatic failover is impossible.
#
# cluster-allow-reads-when-down <yes/no>